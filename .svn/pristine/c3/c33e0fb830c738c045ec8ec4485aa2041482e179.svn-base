package org.saram.controladores;

import java.io.IOException;
import java.util.List;
import java.util.Properties;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.mail.Authenticator;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.saram.accesos.CBPartner_X;
import org.saram.accesos.COrderLine_X;
import org.saram.accesos.COrder_X;
import org.saram.accesos.MProduct_X;
import org.saram.accesos.sqlHQL_X;
import org.saram.modelo.CBPartner;
import org.saram.modelo.COrder;
import org.saram.modelo.COrderLine;
import org.saram.modelo.MProduct;

@SuppressWarnings("serial")
@WebServlet(name = "completarPedidoBoton", urlPatterns = { "/completarPedidoBoton" })
public class completarPedidoBoton extends HttpServlet {

	public completarPedidoBoton() {
		super();
	}

	@SuppressWarnings({ "unused" })
	protected void service(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		COrderLine_X cp = new COrderLine_X();
		COrder_X cx = new COrder_X();
		String cOrderID;
		String adId = request.getParameter("ad_user_id");
		String c_bpartner_id = request.getParameter("c_bpartner_id");
		COrder_X cox = new COrder_X();
		COrder co = new COrder();
		int ingreso = 0;
		if (request.getParameter("c_order_id") == null) {
			cOrderID = "";
		} else {
			cOrderID = request.getParameter("c_order_id");
		}
		;
		co = cox.buscarUno(cOrderID == null ? 0 : Integer.parseInt(cOrderID));
		List<COrderLine> adl = cp.buscarTodos(Integer.parseInt(cOrderID));
		sqlHQL_X sqlx = new sqlHQL_X();
		CBPartner_X cbx = new CBPartner_X();
		CBPartner cb = new CBPartner();
		cb = cbx.buscarUno(c_bpartner_id != null ? Integer.parseInt(c_bpartner_id) : 0);
		Float value = new Float(0);
		// Validacion sin credito
		sqlHQL_X saldos = new sqlHQL_X();
		String sql = "select sum(openamt) from (select * from (SELECT i.ad_org_id," + "i.ad_client_id,"
				+ "i.documentno," + "i.c_invoice_id," + "i.c_order_id," + "i.c_bpartner_id," + "i.issotrx,"
				+ "i.dateinvoiced," + "i.dateacct," + "p.netdays,"
				+ "adempiere.paymenttermduedate(i.c_paymentterm_id, i.dateinvoiced) AS duedate,"
				+ "adempiere.paymenttermduedays(i.c_paymentterm_id, i.dateinvoiced, adempiere.getdate()) AS daysdue,"
				+ "adempiere.adddays(i.dateinvoiced, p.discountdays) AS discountdate,"
				+ "round(i.grandtotal * p.discount / 100, 2) AS discountamt," + "i.grandtotal,"
				+ "adempiere.invoicepaid(i.c_invoice_id, i.c_currency_id, 1) AS paidamt,"
				+ "adempiere.invoiceopen(i.c_invoice_id, 0) AS openamt," + "i.c_currency_id," + "i.c_conversiontype_id,"
				+ "i.c_paymentterm_id," + "i.ispayschedulevalid," + "NULL AS c_invoicepayschedule_id,"
				+ "i.invoicecollectiontype," + "i.c_campaign_id," + "i.c_project_id," + "i.c_activity_id"
				+ "   FROM adempiere.rv_c_invoice i"
				+ " JOIN adempiere.c_paymentterm p ON i.c_paymentterm_id = p.c_paymentterm_id"
				+ "  WHERE adempiere.invoiceopen(i.c_invoice_id, 0) <> 0 " + "	AND i.ispayschedulevalid <> 'Y' "
				+ "	AND (i.docstatus = ANY (ARRAY['CO', 'CL']))" + "	and i.c_bpartner_id=" + cb.getC_bpartner_id()
				+ "UNION" + " SELECT i.ad_org_id," + "i.ad_client_id," + "i.documentno," + "i.c_invoice_id,"
				+ "i.c_order_id," + "i.c_bpartner_id," + "i.issotrx," + "i.dateinvoiced," + "i.dateacct,"
				+ "adempiere.daysbetween(ips.duedate, i.dateinvoiced) AS netdays," + "ips.duedate,"
				+ "adempiere.daysbetween(adempiere.getdate(), ips.duedate) AS daysdue," + "ips.discountdate,"
				+ "ips.discountamt," + "ips.dueamt AS grandtotal,"
				+ "adempiere.invoicepaid(i.c_invoice_id, i.c_currency_id, 1) AS paidamt,"
				+ "adempiere.invoiceopen(i.c_invoice_id, ips.c_invoicepayschedule_id) AS openamt," + "i.c_currency_id,"
				+ "i.c_conversiontype_id," + "i.c_paymentterm_id," + "i.ispayschedulevalid,"
				+ "ips.c_invoicepayschedule_id," + "i.invoicecollectiontype," + "i.c_campaign_id," + "i.c_project_id,"
				+ "i.c_activity_id" + "   FROM adempiere.rv_c_invoice i"
				+ " JOIN adempiere.c_invoicepayschedule ips ON i.c_invoice_id = ips.c_invoice_id"
				+ "  WHERE adempiere.invoiceopen(i.c_invoice_id, ips.c_invoicepayschedule_id) <> 0 "
				+ "	AND i.ispayschedulevalid = 'Y' AND (i.docstatus = ANY (ARRAY['CO', 'CL'])) "
				+ "	AND ips.isvalid = 'Y'" + "	and i.c_bpartner_id= " + cb.getC_bpartner_id()
				+ ") a where daysdue>0 and issotrx='Y') a";
		String sql2 = "select sum(openamt) from (select * from (SELECT i.ad_org_id," + "i.ad_client_id,"
				+ "i.documentno," + "i.c_invoice_id," + "i.c_order_id," + "i.c_bpartner_id," + "i.issotrx,"
				+ "i.dateinvoiced," + "i.dateacct," + "p.netdays,"
				+ "adempiere.paymenttermduedate(i.c_paymentterm_id, i.dateinvoiced) AS duedate,"
				+ "adempiere.paymenttermduedays(i.c_paymentterm_id, i.dateinvoiced, adempiere.getdate()) AS daysdue,"
				+ "adempiere.adddays(i.dateinvoiced, p.discountdays) AS discountdate,"
				+ "round(i.grandtotal * p.discount / 100, 2) AS discountamt," + "i.grandtotal,"
				+ "adempiere.invoicepaid(i.c_invoice_id, i.c_currency_id, 1) AS paidamt,"
				+ "adempiere.invoiceopen(i.c_invoice_id, 0) AS openamt," + "i.c_currency_id," + "i.c_conversiontype_id,"
				+ "i.c_paymentterm_id," + "i.ispayschedulevalid," + "NULL AS c_invoicepayschedule_id,"
				+ "i.invoicecollectiontype," + "i.c_campaign_id," + "i.c_project_id," + "i.c_activity_id"
				+ "   FROM adempiere.rv_c_invoice i"
				+ " JOIN adempiere.c_paymentterm p ON i.c_paymentterm_id = p.c_paymentterm_id"
				+ "  WHERE adempiere.invoiceopen(i.c_invoice_id, 0) <> 0 " + "	AND i.ispayschedulevalid <> 'Y' "
				+ "	AND (i.docstatus = ANY (ARRAY['CO', 'CL']))" + "	and i.c_bpartner_id=" + cb.getC_bpartner_id()
				+ "UNION" + " SELECT i.ad_org_id," + "i.ad_client_id," + "i.documentno," + "i.c_invoice_id,"
				+ "i.c_order_id," + "i.c_bpartner_id," + "i.issotrx," + "i.dateinvoiced," + "i.dateacct,"
				+ "adempiere.daysbetween(ips.duedate, i.dateinvoiced) AS netdays," + "ips.duedate,"
				+ "adempiere.daysbetween(adempiere.getdate(), ips.duedate) AS daysdue," + "ips.discountdate,"
				+ "ips.discountamt," + "ips.dueamt AS grandtotal,"
				+ "adempiere.invoicepaid(i.c_invoice_id, i.c_currency_id, 1) AS paidamt,"
				+ "adempiere.invoiceopen(i.c_invoice_id, ips.c_invoicepayschedule_id) AS openamt," + "i.c_currency_id,"
				+ "i.c_conversiontype_id," + "i.c_paymentterm_id," + "i.ispayschedulevalid,"
				+ "ips.c_invoicepayschedule_id," + "i.invoicecollectiontype," + "i.c_campaign_id," + "i.c_project_id,"
				+ "i.c_activity_id" + "   FROM adempiere.rv_c_invoice i"
				+ " JOIN adempiere.c_invoicepayschedule ips ON i.c_invoice_id = ips.c_invoice_id"
				+ "  WHERE adempiere.invoiceopen(i.c_invoice_id, ips.c_invoicepayschedule_id) <> 0 "
				+ "	AND i.ispayschedulevalid = 'Y' AND (i.docstatus = ANY (ARRAY['CO', 'CL'])) "
				+ "	AND ips.isvalid = 'Y'" + "	and i.c_bpartner_id= " + cb.getC_bpartner_id()
				+ ") a where issotrx='Y') a";
		List<Object> saldo = saldos.buscarUno(sql);
		List<Object> saldoF = saldos.buscarUno(sql2);
		Float saldoFactura = new Float(0.0);
		if (saldo.size() > 0) {
			try {
				saldoFactura = Float.parseFloat(saldo.get(0).toString().replace("[", "").replace("]", ""));
			} catch (Exception e) {
				saldoFactura = new Float(0.0);
			}
		}
		value = saldoFactura;
		Float montoExcedido = new Float(0.0);
		Float montoVencido = new Float(0.0);
		if (cb.getSo_creditlimit() != 0) {

			List<Object> pedidos = saldos
					.buscarUno("select coalesce(sum(grandtotal),0.0) from c_order " + "where c_bpartner_id = "
							+ cb.getC_bpartner_id() + " and docstatus = 'CO' and docaction = 'CL' and "
							+ "c_order_id not in (select c_order_id from c_invoice " + "where c_bpartner_id = "
							+ cb.getC_bpartner_id()
							+ " and c_order_id is not null and docstatus = 'CO' and docaction = 'CL' )");
			if (saldo.size() > 0)
				try {
					saldoFactura = Float.parseFloat(saldo.get(0).toString().replace("[", "").replace("]", ""));
				} catch (Exception e) {
					saldoFactura = new Float(0.0);
				}
			if (saldoF.size() > 0 && saldoF.size() != co.getGrandtotal())
				try {
					montoExcedido = Float.parseFloat(saldoF.get(0).toString().replace("[", "").replace("]", ""));
					montoExcedido = montoExcedido - cb.getSo_creditlimit() + (co.getGrandtotal());
				} catch (Exception e) {
					montoExcedido = new Float(0.0);
				}
			value = saldoFactura;
		}
		if ((co.getGrandtotal() > cb.getSo_creditlimit()) && cb.getSo_creditlimit() > 0 || montoExcedido > 0) {
			request.getRequestDispatcher("/pedido_n.jsp?ad_user_id=" + adId + "&c_bpartner_id=" + c_bpartner_id
					+ "&c_order_id=" + cOrderID + "&solicitud=0").forward(request, response);
			ingreso = 1;
		}
		if (value <= 0 && montoExcedido <= 0) {
			/* Si el cliente no debe nada guardamos informacion */
			co = cox.buscarUno(cOrderID == null ? 0 : Integer.parseInt(cOrderID));
			List<Object> mLocatorObject = sqlx
					.buscarUno("select m_locator_id from m_locator where isactive='Y' and M_warehouse_id = "
							+ co.getM_warehouse_id());
			Integer mLocatorID = (mLocatorObject == null ? 0 : Integer.parseInt(mLocatorObject.get(0).toString()));
			for (COrderLine coi : adl) {
				if (coi.getM_product_id() != null) {
					sqlx.sql("UPDATE m_storage SET qtyreserved = qtyreserved + " + coi.getQtyentered()
							+ " WHERE m_product_id = " + coi.getM_product_id() + " "
							+ "AND m_attributesetinstance_id = 0 AND m_locator_id = " + mLocatorID);
				}
				coi.setQtyreserved(coi.getQtyordered());
				coi.setProcessed("Y");
				cp.salvarOrden(coi);
			}
			if (co.getDocstatus().equals("CO")) {
				request.getRequestDispatcher("/acceso?ad_user_id=" + adId).forward(request, response);
			}
			co.setDocstatus("CO");
			co.setDocaction("CL");
			co.setProcessed("Y");
			cx.salvarOrden(co);
			try {
				List<Object> CBPartnerUser = sqlx.buscarUno(
						"SELECT name FROM C_BPartner where C_BPartner_ID = (SELECT C_BPartner_ID FROM Ad_user WHERE Ad_user_ID = "
								+ adId + ")");
				String vendedor = CBPartnerUser.get(0).toString();
				List<Object> CBPartnerUserMail = sqlx
						.buscarUno("SELECT email FROM Ad_user WHERE Ad_user_ID = " + adId + "");
				String email = "";
				try {
					email = CBPartnerUserMail.get(0).toString();
				} catch (Exception e) {
					email = "";
				}
				/**
				 * ENVIO DE CORREOS
				 **/
				// Mail de nuevo pedido
				String mensaje = "";
				try {
					if (co.getDescription().equals(", CREADO DESDE EL SISTEMA MOVIL PECUARIO")) {
						mensaje = "Por favor verificar el pedido del cliente: " + cb.getName()
								+ "\r\n\r\nCodigo de pedido: " + co.getDocumentno()
								+ "\r\n\r\nDescripcion de pedido: SIN DESCRIPCION \r\n\r\nGenenerado por: " + vendedor;
					} else {
						mensaje = "Por favor verificar el pedido del cliente: " + cb.getName()
								+ "\r\n\r\nCodigo de pedido: " + co.getDocumentno() + "\r\n\r\nDescripcion de pedido: "
								+ co.getDescription() + "\r\n\r\nGenenerado por: " + vendedor;
					}
				} catch (Exception e) {
					mensaje = "Por favor verificar el pedido del cliente: " + cb.getName()
							+ "\r\n\r\nCodigo de pedido: " + co.getDocumentno()
							+ "\r\n\r\nDescripcion de pedido: SIN DESCRIPCION \r\n\r\nGenenerado por: " + vendedor;
				}
				// if (!co.getProcessed().equals("Y")) {
				try {
					if (!co.getEscorreoenviado().equals("Y")) {
						if (adId.equals("1000601") || adId.equals("1000602") || adId.equals("100189")) {
							enviarCorreos(mensaje, "pedidos@mor.com.sv", "notificaciones.informatica@mor.com.sv",
									"ventasconavigan@gmail.com", "conavigan@gmail.com", email);
//							 enviarCorreos(mensaje,"informatica1@mor.com.sv","analistadesistemas@mor.com.sv","","","");
						} else {
							enviarCorreos(mensaje, "pedidos@mor.com.sv", "notificaciones.informatica@mor.com.sv", "",
									"", email);
//							 enviarCorreos(mensaje,"informatica1@mor.com.sv","analistadesistemas@mor.com.sv","","","");
						}
					}
					co.setEscorreoenviado("Y");
					cx.salvarOrden(co);
				} catch (Exception e) {
					// enviarCorreos(mensaje,"pedidos@mor.com.sv","notificaciones.informatica@mor.com.sv","","",email);
				}
				// }
				// enviarCorreos(mensaje,
				// "notificaciones.informatica@mor.com.sv",
				// "informatica1@mor.com.sv", "", "","");
				// pedidos@mor.com.sv
				// Mail a administracion de la demanda si es necesario
				MProduct mp = new MProduct();
				MProduct_X mpx = new MProduct_X();
				for (COrderLine coi : adl) {
					List<Object> qtyDisponibles;
					Double qtyDisponible;
					String stringQtyDisponible;
					if (coi.getM_product_id() != null) {
						qtyDisponibles = sqlx.buscarUno("select sum(qtyonhand) - bomqtyreserved("
								+ coi.getM_product_id() + "," + "" + coi.getM_warehouse_id()
								+ ",0.0) from m_storage WHERE m_product_id =" + coi.getM_product_id());
						stringQtyDisponible = qtyDisponibles.get(0).toString().replace("[", "").replace("]", "");
						if (stringQtyDisponible != null) {
							qtyDisponible = new Double(stringQtyDisponible);
						} else {
							qtyDisponible = new Double(1.0);
						}
						if (qtyDisponible <= 0) {
							mp = mpx.buscarUno(coi.getM_product_id());
							String mensajeDisponibilidad = "Para el pedido " + co.getDocumentno()
									+ " no se cuenta con suficiente disponibilidad para el " + "producto "
									+ mp.getName() + " con codigo " + mp.getValue();
							if (!co.getEscorreoenviadop().equals("Y")) {
								enviarCorreos(mensajeDisponibilidad, "planeacion@mor.com.sv",
										"notificaciones.informatica@mor.com.sv", "pedidos@mor.com.sv", "", "");
//								 enviarCorreos(mensajeDisponibilidad,"informatica1@mor.com.sv","analistadesistemas@mor.com.sv","","","");
								co.setEscorreoenviadop("Y");
								cx.salvarOrden(co);
							}
						}
					}
				}
				/**
				 * FIN ENVIO DE CORREOS
				 **/
				// Redireccionamos pagina
				request.getRequestDispatcher("/pedido_c.jsp?ad_user_id=" + adId + "&c_bpartner_id=" + c_bpartner_id
						+ "&c_order_id=" + cOrderID + "&solicitud=0").forward(request, response);
			} catch (Exception e) {
				// Te cache
			}
		} else {
			if (ingreso == 0) {
				request.getRequestDispatcher("/pedido_n.jsp?ad_user_id=" + adId + "&c_bpartner_id=" + c_bpartner_id
						+ "&c_order_id=" + cOrderID + "&solicitud=0").forward(request, response);
			}
		}
		return;
	}

	@Override
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {

	}

	public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		/*** Saram ***/
	}

	private static final String PATTERN_EMAIL = "^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@"
			+ "[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$";

	public static boolean validateEmail(String email) {
		Pattern pattern = Pattern.compile(PATTERN_EMAIL);
		Matcher matcher = pattern.matcher(email);
		return matcher.matches();

	}
	public boolean enviarCorreos2(String texto, String correo, String copia1, String copia2, String copia3,
			String email) {
		return true;
	}
	public boolean enviarCorreos(String texto, String correo, String copia1, String copia2, String copia3,
			String email) {
		String para = correo;
		email = email.trim();
		String de = "notificaciones.informatica@mor.com.sv";
		if (validateEmail(email))
			de = email;
		String host = "HEFESTA.saram.com";
		Properties propiedades = System.getProperties();
		propiedades.setProperty("mail.transport.protocol", "smtp");
		propiedades.setProperty("mail.smtp.host", host);
		propiedades.setProperty("mail.smtp.auth", "true");
		Authenticator authenticator = new Authenticator() {
			protected PasswordAuthentication getPasswordAuthentication() {
				return new PasswordAuthentication("informatica1", "12345678");
			}
		};
		propiedades.setProperty("mail.port", "26");
		Session sesion = Session.getDefaultInstance(propiedades, authenticator);
		try {
			MimeMessage mensaje = new MimeMessage(sesion);
			mensaje.setFrom(new InternetAddress(de));
			mensaje.setSubject(
					"**PEDIDO GENERADO POR EL SISTEMA MOVIL** SOLICITUD DE APROBACION NOTIFICACION DE PEDIDOS CLIENTE EN ESPERA");
			mensaje.addRecipient(Message.RecipientType.TO, new InternetAddress("<" + para + ">"));
			mensaje.addRecipient(Message.RecipientType.CC, new InternetAddress("<" + copia1 + ">"));
			if (copia2.length() > 1) {
				mensaje.addRecipient(Message.RecipientType.CC, new InternetAddress(copia2));
			}
			if (copia3.length() > 1) {
				mensaje.addRecipient(Message.RecipientType.CC, new InternetAddress(copia3));
			}
			// Now set the actual message
			mensaje.setText(texto);
			// mensaje.setContentLanguage(languages);
			// Enviamos el correo
			Transport.send(mensaje);
			return true;
		} catch (MessagingException e) {
			e.printStackTrace();
			return false;
		}
	}
}
